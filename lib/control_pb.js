// source: control.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.ClientIdentification', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.EventProcessorReference', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.Heartbeat', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.NodeInfo', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.RequestCase', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.PlatformInfo', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.RequestCase', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.control.RequestReconnect', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.oneofGroups_);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.displayName = 'proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.displayName = 'proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.RequestReconnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.RequestReconnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.RequestReconnect.displayName = 'proto.io.axoniq.axonserver.grpc.control.RequestReconnect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.PlatformInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.PlatformInfo.displayName = 'proto.io.axoniq.axonserver.grpc.control.PlatformInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.NodeInfo.displayName = 'proto.io.axoniq.axonserver.grpc.control.NodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.ClientIdentification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.ClientIdentification.displayName = 'proto.io.axoniq.axonserver.grpc.control.ClientIdentification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.repeatedFields_, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.displayName = 'proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.displayName = 'proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.EventProcessorReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.displayName = 'proto.io.axoniq.axonserver.grpc.control.EventProcessorReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.displayName = 'proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.control.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.control.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.control.Heartbeat.displayName = 'proto.io.axoniq.axonserver.grpc.control.Heartbeat';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.oneofGroups_ = [[1,2,3,4,6]];

/**
 * @enum {number}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.RequestCase = {
  REQUEST_NOT_SET: 0,
  REGISTER: 1,
  EVENT_PROCESSOR_INFO: 2,
  HEARTBEAT: 3,
  ACK: 4,
  RESULT: 6
};

/**
 * @return {proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.RequestCase}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.getRequestCase = function() {
  return /** @type {proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.RequestCase} */(jspb.Message.computeOneofCase(this, proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    register: (f = msg.getRegister()) && proto.io.axoniq.axonserver.grpc.control.ClientIdentification.toObject(includeInstance, f),
    eventProcessorInfo: (f = msg.getEventProcessorInfo()) && proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && proto.io.axoniq.axonserver.grpc.control.Heartbeat.toObject(includeInstance, f),
    ack: (f = msg.getAck()) && common_pb.InstructionAck.toObject(includeInstance, f),
    result: (f = msg.getResult()) && common_pb.InstructionResult.toObject(includeInstance, f),
    instructionId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction;
  return proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.axoniq.axonserver.grpc.control.ClientIdentification;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.ClientIdentification.deserializeBinaryFromReader);
      msg.setRegister(value);
      break;
    case 2:
      var value = new proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.deserializeBinaryFromReader);
      msg.setEventProcessorInfo(value);
      break;
    case 3:
      var value = new proto.io.axoniq.axonserver.grpc.control.Heartbeat;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 4:
      var value = new common_pb.InstructionAck;
      reader.readMessage(value,common_pb.InstructionAck.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 6:
      var value = new common_pb.InstructionResult;
      reader.readMessage(value,common_pb.InstructionResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstructionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegister();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.axoniq.axonserver.grpc.control.ClientIdentification.serializeBinaryToWriter
    );
  }
  f = message.getEventProcessorInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.axoniq.axonserver.grpc.control.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.InstructionAck.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_pb.InstructionResult.serializeBinaryToWriter
    );
  }
  f = message.getInstructionId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional ClientIdentification register = 1;
 * @return {?proto.io.axoniq.axonserver.grpc.control.ClientIdentification}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.getRegister = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.ClientIdentification} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.ClientIdentification, 1));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.ClientIdentification|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.setRegister = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.clearRegister = function() {
  return this.setRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.hasRegister = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventProcessorInfo event_processor_info = 2;
 * @return {?proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.getEventProcessorInfo = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo, 2));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.setEventProcessorInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.clearEventProcessorInfo = function() {
  return this.setEventProcessorInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.hasEventProcessorInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Heartbeat heartbeat = 3;
 * @return {?proto.io.axoniq.axonserver.grpc.control.Heartbeat}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.getHeartbeat = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.Heartbeat, 3));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.Heartbeat|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional io.axoniq.axonserver.grpc.InstructionAck ack = 4;
 * @return {?proto.io.axoniq.axonserver.grpc.InstructionAck}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.getAck = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.InstructionAck} */ (
    jspb.Message.getWrapperField(this, common_pb.InstructionAck, 4));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.InstructionAck|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.setAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.hasAck = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional io.axoniq.axonserver.grpc.InstructionResult result = 6;
 * @return {?proto.io.axoniq.axonserver.grpc.InstructionResult}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.getResult = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.InstructionResult} */ (
    jspb.Message.getWrapperField(this, common_pb.InstructionResult, 6));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.InstructionResult|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.setResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.hasResult = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string instruction_id = 5;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.getInstructionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.prototype.setInstructionId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_ = [[1,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.RequestCase = {
  REQUEST_NOT_SET: 0,
  NODE_NOTIFICATION: 1,
  REQUEST_RECONNECT: 3,
  PAUSE_EVENT_PROCESSOR: 4,
  START_EVENT_PROCESSOR: 5,
  RELEASE_SEGMENT: 6,
  REQUEST_EVENT_PROCESSOR_INFO: 7,
  SPLIT_EVENT_PROCESSOR_SEGMENT: 8,
  MERGE_EVENT_PROCESSOR_SEGMENT: 9,
  HEARTBEAT: 10,
  ACK: 11
};

/**
 * @return {proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.RequestCase}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getRequestCase = function() {
  return /** @type {proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.RequestCase} */(jspb.Message.computeOneofCase(this, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeNotification: (f = msg.getNodeNotification()) && proto.io.axoniq.axonserver.grpc.control.NodeInfo.toObject(includeInstance, f),
    requestReconnect: (f = msg.getRequestReconnect()) && proto.io.axoniq.axonserver.grpc.control.RequestReconnect.toObject(includeInstance, f),
    pauseEventProcessor: (f = msg.getPauseEventProcessor()) && proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.toObject(includeInstance, f),
    startEventProcessor: (f = msg.getStartEventProcessor()) && proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.toObject(includeInstance, f),
    releaseSegment: (f = msg.getReleaseSegment()) && proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.toObject(includeInstance, f),
    requestEventProcessorInfo: (f = msg.getRequestEventProcessorInfo()) && proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.toObject(includeInstance, f),
    splitEventProcessorSegment: (f = msg.getSplitEventProcessorSegment()) && proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.toObject(includeInstance, f),
    mergeEventProcessorSegment: (f = msg.getMergeEventProcessorSegment()) && proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && proto.io.axoniq.axonserver.grpc.control.Heartbeat.toObject(includeInstance, f),
    ack: (f = msg.getAck()) && common_pb.InstructionAck.toObject(includeInstance, f),
    instructionId: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction;
  return proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.axoniq.axonserver.grpc.control.NodeInfo;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.NodeInfo.deserializeBinaryFromReader);
      msg.setNodeNotification(value);
      break;
    case 3:
      var value = new proto.io.axoniq.axonserver.grpc.control.RequestReconnect;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.RequestReconnect.deserializeBinaryFromReader);
      msg.setRequestReconnect(value);
      break;
    case 4:
      var value = new proto.io.axoniq.axonserver.grpc.control.EventProcessorReference;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.deserializeBinaryFromReader);
      msg.setPauseEventProcessor(value);
      break;
    case 5:
      var value = new proto.io.axoniq.axonserver.grpc.control.EventProcessorReference;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.deserializeBinaryFromReader);
      msg.setStartEventProcessor(value);
      break;
    case 6:
      var value = new proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.deserializeBinaryFromReader);
      msg.setReleaseSegment(value);
      break;
    case 7:
      var value = new proto.io.axoniq.axonserver.grpc.control.EventProcessorReference;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.deserializeBinaryFromReader);
      msg.setRequestEventProcessorInfo(value);
      break;
    case 8:
      var value = new proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.deserializeBinaryFromReader);
      msg.setSplitEventProcessorSegment(value);
      break;
    case 9:
      var value = new proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.deserializeBinaryFromReader);
      msg.setMergeEventProcessorSegment(value);
      break;
    case 10:
      var value = new proto.io.axoniq.axonserver.grpc.control.Heartbeat;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 11:
      var value = new common_pb.InstructionAck;
      reader.readMessage(value,common_pb.InstructionAck.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstructionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeNotification();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.axoniq.axonserver.grpc.control.NodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getRequestReconnect();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.axoniq.axonserver.grpc.control.RequestReconnect.serializeBinaryToWriter
    );
  }
  f = message.getPauseEventProcessor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.serializeBinaryToWriter
    );
  }
  f = message.getStartEventProcessor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.serializeBinaryToWriter
    );
  }
  f = message.getReleaseSegment();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.serializeBinaryToWriter
    );
  }
  f = message.getRequestEventProcessorInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.serializeBinaryToWriter
    );
  }
  f = message.getSplitEventProcessorSegment();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.serializeBinaryToWriter
    );
  }
  f = message.getMergeEventProcessorSegment();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.io.axoniq.axonserver.grpc.control.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      common_pb.InstructionAck.serializeBinaryToWriter
    );
  }
  f = message.getInstructionId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional NodeInfo node_notification = 1;
 * @return {?proto.io.axoniq.axonserver.grpc.control.NodeInfo}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getNodeNotification = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.NodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.NodeInfo, 1));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.NodeInfo|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setNodeNotification = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearNodeNotification = function() {
  return this.setNodeNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasNodeNotification = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestReconnect request_reconnect = 3;
 * @return {?proto.io.axoniq.axonserver.grpc.control.RequestReconnect}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getRequestReconnect = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.RequestReconnect} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.RequestReconnect, 3));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.RequestReconnect|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setRequestReconnect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearRequestReconnect = function() {
  return this.setRequestReconnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasRequestReconnect = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventProcessorReference pause_event_processor = 4;
 * @return {?proto.io.axoniq.axonserver.grpc.control.EventProcessorReference}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getPauseEventProcessor = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.EventProcessorReference} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.EventProcessorReference, 4));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.EventProcessorReference|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setPauseEventProcessor = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearPauseEventProcessor = function() {
  return this.setPauseEventProcessor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasPauseEventProcessor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EventProcessorReference start_event_processor = 5;
 * @return {?proto.io.axoniq.axonserver.grpc.control.EventProcessorReference}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getStartEventProcessor = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.EventProcessorReference} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.EventProcessorReference, 5));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.EventProcessorReference|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setStartEventProcessor = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearStartEventProcessor = function() {
  return this.setStartEventProcessor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasStartEventProcessor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EventProcessorSegmentReference release_segment = 6;
 * @return {?proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getReleaseSegment = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference, 6));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setReleaseSegment = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearReleaseSegment = function() {
  return this.setReleaseSegment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasReleaseSegment = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EventProcessorReference request_event_processor_info = 7;
 * @return {?proto.io.axoniq.axonserver.grpc.control.EventProcessorReference}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getRequestEventProcessorInfo = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.EventProcessorReference} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.EventProcessorReference, 7));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.EventProcessorReference|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setRequestEventProcessorInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearRequestEventProcessorInfo = function() {
  return this.setRequestEventProcessorInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasRequestEventProcessorInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EventProcessorSegmentReference split_event_processor_segment = 8;
 * @return {?proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getSplitEventProcessorSegment = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference, 8));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setSplitEventProcessorSegment = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearSplitEventProcessorSegment = function() {
  return this.setSplitEventProcessorSegment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasSplitEventProcessorSegment = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EventProcessorSegmentReference merge_event_processor_segment = 9;
 * @return {?proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getMergeEventProcessorSegment = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference, 9));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setMergeEventProcessorSegment = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearMergeEventProcessorSegment = function() {
  return this.setMergeEventProcessorSegment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasMergeEventProcessorSegment = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Heartbeat heartbeat = 10;
 * @return {?proto.io.axoniq.axonserver.grpc.control.Heartbeat}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getHeartbeat = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.Heartbeat, 10));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.Heartbeat|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional io.axoniq.axonserver.grpc.InstructionAck ack = 11;
 * @return {?proto.io.axoniq.axonserver.grpc.InstructionAck}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getAck = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.InstructionAck} */ (
    jspb.Message.getWrapperField(this, common_pb.InstructionAck, 11));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.InstructionAck|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.hasAck = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string instruction_id = 12;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.getInstructionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.prototype.setInstructionId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.RequestReconnect.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.RequestReconnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.RequestReconnect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.RequestReconnect.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.RequestReconnect}
 */
proto.io.axoniq.axonserver.grpc.control.RequestReconnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.RequestReconnect;
  return proto.io.axoniq.axonserver.grpc.control.RequestReconnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.RequestReconnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.RequestReconnect}
 */
proto.io.axoniq.axonserver.grpc.control.RequestReconnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.RequestReconnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.RequestReconnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.RequestReconnect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.RequestReconnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.PlatformInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.PlatformInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    primary: (f = msg.getPrimary()) && proto.io.axoniq.axonserver.grpc.control.NodeInfo.toObject(includeInstance, f),
    sameConnection: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInfo}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.PlatformInfo;
  return proto.io.axoniq.axonserver.grpc.control.PlatformInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.PlatformInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInfo}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.axoniq.axonserver.grpc.control.NodeInfo;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.NodeInfo.deserializeBinaryFromReader);
      msg.setPrimary(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSameConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.PlatformInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.PlatformInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimary();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.axoniq.axonserver.grpc.control.NodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getSameConnection();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional NodeInfo primary = 1;
 * @return {?proto.io.axoniq.axonserver.grpc.control.NodeInfo}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.prototype.getPrimary = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.control.NodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.control.NodeInfo, 1));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.control.NodeInfo|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInfo} returns this
*/
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.prototype.setPrimary = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.prototype.clearPrimary = function() {
  return this.setPrimary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.prototype.hasPrimary = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool same_connection = 2;
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.prototype.getSameConnection = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.PlatformInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.PlatformInfo.prototype.setSameConnection = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.NodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.NodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    grpcPort: jspb.Message.getFieldWithDefault(msg, 2, 0),
    httpPort: jspb.Message.getFieldWithDefault(msg, 3, 0),
    version: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nodeName: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.NodeInfo}
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.NodeInfo;
  return proto.io.axoniq.axonserver.grpc.control.NodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.NodeInfo}
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrpcPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHttpPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.NodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGrpcPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHttpPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string host_name = 1;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.getHostName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.NodeInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.setHostName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 grpc_port = 2;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.getGrpcPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.NodeInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.setGrpcPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 http_port = 3;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.getHttpPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.NodeInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.setHttpPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 version = 4;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.NodeInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string node_name = 5;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.NodeInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.NodeInfo.prototype.setNodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.ClientIdentification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.ClientIdentification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    componentName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
    version: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.ClientIdentification}
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.ClientIdentification;
  return proto.io.axoniq.axonserver.grpc.control.ClientIdentification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.ClientIdentification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.ClientIdentification}
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentName(value);
      break;
    case 3:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.ClientIdentification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.ClientIdentification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComponentName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.ClientIdentification} returns this
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string component_name = 2;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.getComponentName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.ClientIdentification} returns this
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.setComponentName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> tags = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.axoniq.axonserver.grpc.control.ClientIdentification} returns this
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.ClientIdentification} returns this
 */
proto.io.axoniq.axonserver.grpc.control.ClientIdentification.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    processorName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    activeThreads: jspb.Message.getFieldWithDefault(msg, 3, 0),
    running: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    error: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    segmentStatusList: jspb.Message.toObjectList(msg.getSegmentStatusList(),
    proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.toObject, includeInstance),
    availableThreads: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tokenStoreIdentifier: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo;
  return proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessorName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveThreads(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunning(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setError(value);
      break;
    case 6:
      var value = new proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.deserializeBinaryFromReader);
      msg.addSegmentStatus(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailableThreads(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenStoreIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessorName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActiveThreads();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRunning();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getError();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getSegmentStatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.serializeBinaryToWriter
    );
  }
  f = message.getAvailableThreads();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getTokenStoreIdentifier();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    segmentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    caughtUp: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    replaying: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    onePartOf: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tokenPosition: jspb.Message.getFieldWithDefault(msg, 5, 0),
    errorState: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus;
  return proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSegmentId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCaughtUp(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReplaying(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOnePartOf(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTokenPosition(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCaughtUp();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getReplaying();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOnePartOf();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTokenPosition();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getErrorState();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 segment_id = 1;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.getSegmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.setSegmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool caught_up = 2;
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.getCaughtUp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.setCaughtUp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool replaying = 3;
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.getReplaying = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.setReplaying = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 one_part_of = 4;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.getOnePartOf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.setOnePartOf = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 token_position = 5;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.getTokenPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.setTokenPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string error_state = 6;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.getErrorState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus.prototype.setErrorState = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string processor_name = 1;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.getProcessorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.setProcessorName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mode = 2;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.setMode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 active_threads = 3;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.getActiveThreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.setActiveThreads = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool running = 4;
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.getRunning = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.setRunning = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool error = 5;
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.getError = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.setError = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated SegmentStatus segment_status = 6;
 * @return {!Array<!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus>}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.getSegmentStatusList = function() {
  return /** @type{!Array<!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus, 6));
};


/**
 * @param {!Array<!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus>} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} returns this
*/
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.setSegmentStatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.addSegmentStatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.clearSegmentStatusList = function() {
  return this.setSegmentStatusList([]);
};


/**
 * optional int32 available_threads = 7;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.getAvailableThreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.setAvailableThreads = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string token_store_identifier = 8;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.getTokenStoreIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorInfo.prototype.setTokenStoreIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    processorName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorReference}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.EventProcessorReference;
  return proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorReference}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessorName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessorName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string processor_name = 1;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.prototype.getProcessorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorReference} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorReference.prototype.setProcessorName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    processorName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    segmentIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference;
  return proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessorName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSegmentIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessorName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSegmentIdentifier();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string processor_name = 1;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.prototype.getProcessorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.prototype.setProcessorName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 segment_identifier = 2;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.prototype.getSegmentIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference} returns this
 */
proto.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference.prototype.setSegmentIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.control.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.control.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.control.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.control.Heartbeat}
 */
proto.io.axoniq.axonserver.grpc.control.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.control.Heartbeat;
  return proto.io.axoniq.axonserver.grpc.control.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.control.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.control.Heartbeat}
 */
proto.io.axoniq.axonserver.grpc.control.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.control.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.control.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.control.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.control.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.io.axoniq.axonserver.grpc.control);
