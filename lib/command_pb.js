// source: command.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.command.Command', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.RequestCase', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.RequestCase', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.command.CommandResponse', null, global);
goog.exportSymbol('proto.io.axoniq.axonserver.grpc.command.CommandSubscription', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.oneofGroups_);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.displayName = 'proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.oneofGroups_);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.displayName = 'proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.command.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.axoniq.axonserver.grpc.command.Command.repeatedFields_, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.command.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.command.Command.displayName = 'proto.io.axoniq.axonserver.grpc.command.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.axoniq.axonserver.grpc.command.CommandResponse.repeatedFields_, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.command.CommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.command.CommandResponse.displayName = 'proto.io.axoniq.axonserver.grpc.command.CommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.axoniq.axonserver.grpc.command.CommandSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.axoniq.axonserver.grpc.command.CommandSubscription.displayName = 'proto.io.axoniq.axonserver.grpc.command.CommandSubscription';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.RequestCase = {
  REQUEST_NOT_SET: 0,
  SUBSCRIBE: 1,
  UNSUBSCRIBE: 2,
  FLOW_CONTROL: 3,
  COMMAND_RESPONSE: 4,
  ACK: 5
};

/**
 * @return {proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.RequestCase}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.getRequestCase = function() {
  return /** @type {proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.RequestCase} */(jspb.Message.computeOneofCase(this, proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscribe: (f = msg.getSubscribe()) && proto.io.axoniq.axonserver.grpc.command.CommandSubscription.toObject(includeInstance, f),
    unsubscribe: (f = msg.getUnsubscribe()) && proto.io.axoniq.axonserver.grpc.command.CommandSubscription.toObject(includeInstance, f),
    flowControl: (f = msg.getFlowControl()) && common_pb.FlowControl.toObject(includeInstance, f),
    commandResponse: (f = msg.getCommandResponse()) && proto.io.axoniq.axonserver.grpc.command.CommandResponse.toObject(includeInstance, f),
    ack: (f = msg.getAck()) && common_pb.InstructionAck.toObject(includeInstance, f),
    instructionId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound;
  return proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.axoniq.axonserver.grpc.command.CommandSubscription;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.command.CommandSubscription.deserializeBinaryFromReader);
      msg.setSubscribe(value);
      break;
    case 2:
      var value = new proto.io.axoniq.axonserver.grpc.command.CommandSubscription;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.command.CommandSubscription.deserializeBinaryFromReader);
      msg.setUnsubscribe(value);
      break;
    case 3:
      var value = new common_pb.FlowControl;
      reader.readMessage(value,common_pb.FlowControl.deserializeBinaryFromReader);
      msg.setFlowControl(value);
      break;
    case 4:
      var value = new proto.io.axoniq.axonserver.grpc.command.CommandResponse;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.command.CommandResponse.deserializeBinaryFromReader);
      msg.setCommandResponse(value);
      break;
    case 5:
      var value = new common_pb.InstructionAck;
      reader.readMessage(value,common_pb.InstructionAck.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstructionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscribe();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.axoniq.axonserver.grpc.command.CommandSubscription.serializeBinaryToWriter
    );
  }
  f = message.getUnsubscribe();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.axoniq.axonserver.grpc.command.CommandSubscription.serializeBinaryToWriter
    );
  }
  f = message.getFlowControl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.FlowControl.serializeBinaryToWriter
    );
  }
  f = message.getCommandResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.io.axoniq.axonserver.grpc.command.CommandResponse.serializeBinaryToWriter
    );
  }
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.InstructionAck.serializeBinaryToWriter
    );
  }
  f = message.getInstructionId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional CommandSubscription subscribe = 1;
 * @return {?proto.io.axoniq.axonserver.grpc.command.CommandSubscription}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.getSubscribe = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.command.CommandSubscription} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.command.CommandSubscription, 1));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.command.CommandSubscription|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.setSubscribe = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.clearSubscribe = function() {
  return this.setSubscribe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.hasSubscribe = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CommandSubscription unsubscribe = 2;
 * @return {?proto.io.axoniq.axonserver.grpc.command.CommandSubscription}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.getUnsubscribe = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.command.CommandSubscription} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.command.CommandSubscription, 2));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.command.CommandSubscription|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.setUnsubscribe = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.clearUnsubscribe = function() {
  return this.setUnsubscribe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.hasUnsubscribe = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional io.axoniq.axonserver.grpc.FlowControl flow_control = 3;
 * @return {?proto.io.axoniq.axonserver.grpc.FlowControl}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.getFlowControl = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.FlowControl} */ (
    jspb.Message.getWrapperField(this, common_pb.FlowControl, 3));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.FlowControl|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.setFlowControl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.clearFlowControl = function() {
  return this.setFlowControl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.hasFlowControl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CommandResponse command_response = 4;
 * @return {?proto.io.axoniq.axonserver.grpc.command.CommandResponse}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.getCommandResponse = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.command.CommandResponse} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.command.CommandResponse, 4));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.command.CommandResponse|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.setCommandResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.clearCommandResponse = function() {
  return this.setCommandResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.hasCommandResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional io.axoniq.axonserver.grpc.InstructionAck ack = 5;
 * @return {?proto.io.axoniq.axonserver.grpc.InstructionAck}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.getAck = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.InstructionAck} */ (
    jspb.Message.getWrapperField(this, common_pb.InstructionAck, 5));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.InstructionAck|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.setAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.hasAck = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string instruction_id = 6;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.getInstructionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderOutbound.prototype.setInstructionId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.RequestCase = {
  REQUEST_NOT_SET: 0,
  ACK: 1,
  COMMAND: 2
};

/**
 * @return {proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.RequestCase}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.getRequestCase = function() {
  return /** @type {proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.RequestCase} */(jspb.Message.computeOneofCase(this, proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: (f = msg.getAck()) && common_pb.InstructionAck.toObject(includeInstance, f),
    command: (f = msg.getCommand()) && proto.io.axoniq.axonserver.grpc.command.Command.toObject(includeInstance, f),
    instructionId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound;
  return proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.InstructionAck;
      reader.readMessage(value,common_pb.InstructionAck.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 2:
      var value = new proto.io.axoniq.axonserver.grpc.command.Command;
      reader.readMessage(value,proto.io.axoniq.axonserver.grpc.command.Command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstructionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.InstructionAck.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.axoniq.axonserver.grpc.command.Command.serializeBinaryToWriter
    );
  }
  f = message.getInstructionId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional io.axoniq.axonserver.grpc.InstructionAck ack = 1;
 * @return {?proto.io.axoniq.axonserver.grpc.InstructionAck}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.getAck = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.InstructionAck} */ (
    jspb.Message.getWrapperField(this, common_pb.InstructionAck, 1));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.InstructionAck|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.setAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Command command = 2;
 * @return {?proto.io.axoniq.axonserver.grpc.command.Command}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.getCommand = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.command.Command} */ (
    jspb.Message.getWrapperField(this, proto.io.axoniq.axonserver.grpc.command.Command, 2));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.command.Command|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.setCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string instruction_id = 3;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.getInstructionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandProviderInbound.prototype.setInstructionId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.axoniq.axonserver.grpc.command.Command.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.command.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.command.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    payload: (f = msg.getPayload()) && common_pb.SerializedObject.toObject(includeInstance, f),
    metaDataMap: (f = msg.getMetaDataMap()) ? f.toObject(includeInstance, proto.io.axoniq.axonserver.grpc.MetaDataValue.toObject) : [],
    processingInstructionsList: jspb.Message.toObjectList(msg.getProcessingInstructionsList(),
    common_pb.ProcessingInstruction.toObject, includeInstance),
    clientId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    componentName: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command}
 */
proto.io.axoniq.axonserver.grpc.command.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.command.Command;
  return proto.io.axoniq.axonserver.grpc.command.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.command.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command}
 */
proto.io.axoniq.axonserver.grpc.command.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = new common_pb.SerializedObject;
      reader.readMessage(value,common_pb.SerializedObject.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 5:
      var value = msg.getMetaDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.io.axoniq.axonserver.grpc.MetaDataValue.deserializeBinaryFromReader, "", new proto.io.axoniq.axonserver.grpc.MetaDataValue());
         });
      break;
    case 6:
      var value = new common_pb.ProcessingInstruction;
      reader.readMessage(value,common_pb.ProcessingInstruction.deserializeBinaryFromReader);
      msg.addProcessingInstructions(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.command.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.command.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.SerializedObject.serializeBinaryToWriter
    );
  }
  f = message.getMetaDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.io.axoniq.axonserver.grpc.MetaDataValue.serializeBinaryToWriter);
  }
  f = message.getProcessingInstructionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      common_pb.ProcessingInstruction.serializeBinaryToWriter
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getComponentName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string message_identifier = 1;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.getMessageIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.setMessageIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional io.axoniq.axonserver.grpc.SerializedObject payload = 4;
 * @return {?proto.io.axoniq.axonserver.grpc.SerializedObject}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.getPayload = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.SerializedObject} */ (
    jspb.Message.getWrapperField(this, common_pb.SerializedObject, 4));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.SerializedObject|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
*/
proto.io.axoniq.axonserver.grpc.command.Command.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, io.axoniq.axonserver.grpc.MetaDataValue> meta_data = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.io.axoniq.axonserver.grpc.MetaDataValue>}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.getMetaDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.io.axoniq.axonserver.grpc.MetaDataValue>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.io.axoniq.axonserver.grpc.MetaDataValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.clearMetaDataMap = function() {
  this.getMetaDataMap().clear();
  return this;};


/**
 * repeated io.axoniq.axonserver.grpc.ProcessingInstruction processing_instructions = 6;
 * @return {!Array<!proto.io.axoniq.axonserver.grpc.ProcessingInstruction>}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.getProcessingInstructionsList = function() {
  return /** @type{!Array<!proto.io.axoniq.axonserver.grpc.ProcessingInstruction>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.ProcessingInstruction, 6));
};


/**
 * @param {!Array<!proto.io.axoniq.axonserver.grpc.ProcessingInstruction>} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
*/
proto.io.axoniq.axonserver.grpc.command.Command.prototype.setProcessingInstructionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.io.axoniq.axonserver.grpc.ProcessingInstruction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.axoniq.axonserver.grpc.ProcessingInstruction}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.addProcessingInstructions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.io.axoniq.axonserver.grpc.ProcessingInstruction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.clearProcessingInstructionsList = function() {
  return this.setProcessingInstructionsList([]);
};


/**
 * optional string client_id = 7;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string component_name = 8;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.getComponentName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.Command} returns this
 */
proto.io.axoniq.axonserver.grpc.command.Command.prototype.setComponentName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.command.CommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errorMessage: (f = msg.getErrorMessage()) && common_pb.ErrorMessage.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && common_pb.SerializedObject.toObject(includeInstance, f),
    metaDataMap: (f = msg.getMetaDataMap()) ? f.toObject(includeInstance, proto.io.axoniq.axonserver.grpc.MetaDataValue.toObject) : [],
    processingInstructionsList: jspb.Message.toObjectList(msg.getProcessingInstructionsList(),
    common_pb.ProcessingInstruction.toObject, includeInstance),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.command.CommandResponse;
  return proto.io.axoniq.axonserver.grpc.command.CommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = new common_pb.ErrorMessage;
      reader.readMessage(value,common_pb.ErrorMessage.deserializeBinaryFromReader);
      msg.setErrorMessage(value);
      break;
    case 4:
      var value = new common_pb.SerializedObject;
      reader.readMessage(value,common_pb.SerializedObject.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 5:
      var value = msg.getMetaDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.io.axoniq.axonserver.grpc.MetaDataValue.deserializeBinaryFromReader, "", new proto.io.axoniq.axonserver.grpc.MetaDataValue());
         });
      break;
    case 6:
      var value = new common_pb.ProcessingInstruction;
      reader.readMessage(value,common_pb.ProcessingInstruction.deserializeBinaryFromReader);
      msg.addProcessingInstructions(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.command.CommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErrorMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.ErrorMessage.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.SerializedObject.serializeBinaryToWriter
    );
  }
  f = message.getMetaDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.io.axoniq.axonserver.grpc.MetaDataValue.serializeBinaryToWriter);
  }
  f = message.getProcessingInstructionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      common_pb.ProcessingInstruction.serializeBinaryToWriter
    );
  }
  f = message.getRequestIdentifier();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string message_identifier = 1;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.getMessageIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.setMessageIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string error_code = 2;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.getErrorCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional io.axoniq.axonserver.grpc.ErrorMessage error_message = 3;
 * @return {?proto.io.axoniq.axonserver.grpc.ErrorMessage}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.getErrorMessage = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, common_pb.ErrorMessage, 3));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.ErrorMessage|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.setErrorMessage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.clearErrorMessage = function() {
  return this.setErrorMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.hasErrorMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional io.axoniq.axonserver.grpc.SerializedObject payload = 4;
 * @return {?proto.io.axoniq.axonserver.grpc.SerializedObject}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.getPayload = function() {
  return /** @type{?proto.io.axoniq.axonserver.grpc.SerializedObject} */ (
    jspb.Message.getWrapperField(this, common_pb.SerializedObject, 4));
};


/**
 * @param {?proto.io.axoniq.axonserver.grpc.SerializedObject|undefined} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, io.axoniq.axonserver.grpc.MetaDataValue> meta_data = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.io.axoniq.axonserver.grpc.MetaDataValue>}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.getMetaDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.io.axoniq.axonserver.grpc.MetaDataValue>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.io.axoniq.axonserver.grpc.MetaDataValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.clearMetaDataMap = function() {
  this.getMetaDataMap().clear();
  return this;};


/**
 * repeated io.axoniq.axonserver.grpc.ProcessingInstruction processing_instructions = 6;
 * @return {!Array<!proto.io.axoniq.axonserver.grpc.ProcessingInstruction>}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.getProcessingInstructionsList = function() {
  return /** @type{!Array<!proto.io.axoniq.axonserver.grpc.ProcessingInstruction>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.ProcessingInstruction, 6));
};


/**
 * @param {!Array<!proto.io.axoniq.axonserver.grpc.ProcessingInstruction>} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
*/
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.setProcessingInstructionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.io.axoniq.axonserver.grpc.ProcessingInstruction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.axoniq.axonserver.grpc.ProcessingInstruction}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.addProcessingInstructions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.io.axoniq.axonserver.grpc.ProcessingInstruction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.clearProcessingInstructionsList = function() {
  return this.setProcessingInstructionsList([]);
};


/**
 * optional string request_identifier = 7;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.getRequestIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandResponse} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandResponse.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.io.axoniq.axonserver.grpc.command.CommandSubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: jspb.Message.getFieldWithDefault(msg, 2, ""),
    componentName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    loadFactor: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription}
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.axoniq.axonserver.grpc.command.CommandSubscription;
  return proto.io.axoniq.axonserver.grpc.command.CommandSubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription}
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponentName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLoadFactor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.axoniq.axonserver.grpc.command.CommandSubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getComponentName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLoadFactor();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string message_id = 1;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string command = 2;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string component_name = 3;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.getComponentName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.setComponentName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string client_id = 4;
 * @return {string}
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 load_factor = 5;
 * @return {number}
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.getLoadFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.axoniq.axonserver.grpc.command.CommandSubscription} returns this
 */
proto.io.axoniq.axonserver.grpc.command.CommandSubscription.prototype.setLoadFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.io.axoniq.axonserver.grpc.command);
